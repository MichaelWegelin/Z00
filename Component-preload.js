/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "de/iprocon/Component-preload",
	"modules": {
		"de/iprocon/view/Detail.view.xml": "<mvc:View xmlns:footerbar=\"sap.ushell.ui.footerbar\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" xmlns:sap.ui.core=\"sap.ui.core\" xmlns:sap.ui.layout.form=\"sap.ui.layout.form\" xmlns:sap.ui.commons=\"sap.ui.commons\" controllerName=\"de.iprocon.controller.Detail\">\n\t<Page busy=\"{detailView&gt;/busy}\" busyIndicatorDelay=\"{detailView&gt;/delay}\" id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device&gt;/system/phone}\" title=\"{i18n&gt;detailTitle}\">\n\t\t<content>\n\t\t\t<ObjectHeader id=\"objectHeader\" title=\"{path: 'BeginDate', type: 'sap.ui.model.type.Date', pattern: 'dd.MM.yyyy'}-{path: 'EndDate', type: 'sap.ui.model.type.Date', pattern: 'dd.MM.yyyy'}\"/>\n\t\t\t<sap.ui.layout.form:SimpleForm xmlns:sap.ui.layout.form=\"sap.ui.layout.form\" editable=\"false\" layout=\"ResponsiveGridLayout\" id=\"__form0\">\n\t\t\t    <sap.ui.layout.form:content>\n\t\t\t        <sap.ui.core:Title xmlns:sap.ui.core=\"sap.ui.core\" text=\"{i18n&gt;DetailViewTitle}\" id=\"__title0\"/>\n\t\t\t        <Label text=\"Country\" id=\"labelCountry\"/>\n<!--\t\t\t        <ComboBox items=\"{/CountrySet}\" selectedItem=\"Element sap.ui.core.ListItem#__item0\" value=\"Germany\" selectedKey=\"{CountryKey}\" id=\"countryBox\">-->\n\t\t\t        <ComboBox selectedItem=\"Element sap.ui.core.ListItem#__item0\" value=\"Germany\" selectedKey=\"{CountryKey}\" id=\"countryBox\">\n\t\t\t            <items>\n\t\t\t                <sap.ui.core:ListItem text=\"Germany\" key=\"DE\" id=\"__item0\"/>\n\t\t\t                <sap.ui.core:ListItem text=\"France\" key=\"FR\" id=\"__item1\"/>\n\t\t\t                <sap.ui.core:ListItem text=\"UK\" key=\"UK\" id=\"__item2\"/>\n\t\t\t                <sap.ui.core:ListItem text=\"Undefined\" key=\"\" id=\"__item3\"/>\n\t\t\t             </items>\n\t\t\t        </ComboBox>\n\t\t\t        <Label text=\"Reason\" id=\"labelDescription\"/>\n\t\t\t        <Input width=\"100%\" id=\"Description\" value=\"{AttendanceReason}\"/>\n\t\t\t        <Label text=\"BeginDate\" width=\"100%\" id=\"labelBeginDate\"/>\n\t\t\t        <DatePicker width=\"100%\" id=\"BeginDate\" value=\"{path: 'BeginDate', type: 'sap.ui.model.odata.type.DateTime', formatOptions: {UTC: true}, constraints: {displayFormat: 'Date'}}\" displayFormat=\"dd.MM.yyyy\" valueFormat=\"yyyyMMdd\"/>\n\t\t\t        <Label text=\"EndDate\" width=\"100%\" id=\"labelEndDate\"/>\n\t\t\t        <DatePicker width=\"100%\" id=\"EndDate\" value=\"{path: 'EndDate', type: 'sap.ui.model.odata.type.DateTime', formatOptions: {UTC: true}, constraints: {displayFormat: 'Date'}}\" displayFormat=\"dd.MM.yyyy\" valueFormat=\"yyyyMMdd\"/>\n\t\t\t        <Label text=\"Label\" width=\"100%\" id=\"__label1\"/>\n\t\t\t        </sap.ui.layout.form:content>\n\t\t\t</sap.ui.layout.form:SimpleForm>\n\t\t</content>\n\t\t<footer>\n\t\t\t<OverflowToolbar id=\"footerToolbar\">\n\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t<Button text=\"\" width=\"\" id=\"saveButton\" icon=\"sap-icon://save\" type=\"Accept\" press=\"onSaveButtonPress\"/>\n\t\t\t\t<Button text=\"\" width=\"\" id=\"deleteButton\" icon=\"sap-icon://delete\" type=\"Reject\" press=\"onDeleteButtonPress\"/>\n\t\t\t\t<Button icon=\"sap-icon://action\" id=\"shareButton\" press=\"onSharePress\" tooltip=\"{i18n&gt;shareTooltip}\">\n\t\t\t\t\t<dependents>\n\t\t\t\t\t\t<ActionSheet id=\"shareSheet\" placement=\"Top\" showCancelButton=\"true\">\n\t\t\t\t\t\t\t<buttons>\n\t\t\t\t\t\t\t\t<Button icon=\"sap-icon://email\" id=\"shareEmail\" press=\"onShareEmailPress\" text=\"{i18n&gt;shareSendEmail}\"/>\n\t\t\t\t\t\t\t\t<Button icon=\"sap-icon://jam\" id=\"shareInJam\" press=\"onShareInJamPress\" text=\"{i18n&gt;shareOnJamTitle}\" visible=\"{FLP&gt;/isShareInJamActive}\"/>\n\t\t\t\t\t\t\t\t<footerbar:AddBookmarkButton appData=\"{ path: 'detailView&gt;/saveAsTileTitle', formatter: '.formatter.shareTileData' }\" id=\"shareTile\"/>\n\t\t\t\t\t\t\t</buttons>\n\t\t\t\t\t\t</ActionSheet>\n\t\t\t\t\t</dependents>\n\t\t\t\t</Button>\n\t\t\t<content/>\n\t\t\t</OverflowToolbar>\n\t\t</footer>\n\t</Page>\n</mvc:View>",
		"de/iprocon/Component.js": "sap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/Device\",\n\t\"de/iprocon/model/models\",\n\t\"de/iprocon/controller/ListSelector\",\n\t\"de/iprocon/controller/ErrorHandler\",\n\t\"de/iprocon/model/formatter\"\n], function(UIComponent, Device, models, ListSelector, ErrorHandler) {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"de.iprocon.Component\", {\n\n\t\tmetadata: {\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"rootView\": {\n\t\t\t\t\"viewName\": \"de.iprocon.view.App\",\n\t\t\t\t\"type\": \"XML\",\n\t\t\t\t\"id\": \"app\"\n\t\t\t},\n\t\t\t\"dependencies\": {\n\t\t\t\t\"libs\": [\"sap.ui.core\", \"sap.m\", \"sap.ui.layout\"]\n\t\t\t},\n\t\t\t\"config\": {\n\t\t\t\t\"i18nBundle\": \"de.iprocon.i18n.i18n\",\n\t\t\t\t\"serviceUrl\": \"/sap/opu/odata/sap/ZHR_ATTENDANCE_INTERVAL_SRV/\",\n\t\t\t\t\"icon\": \"\",\n\t\t\t\t\"favIcon\": \"\",\n\t\t\t\t\"phone\": \"\",\n\t\t\t\t\"phone@2\": \"\",\n\t\t\t\t\"tablet\": \"\",\n\t\t\t\t\"tablet@2\": \"\"\n\t\t\t},\n\t\t\t\"routing\": {\n\t\t\t\t\"config\": {\n\t\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\t\"viewPath\": \"de.iprocon.view\",\n\t\t\t\t\t\"controlId\": \"idAppControl\",\n\t\t\t\t\t\"controlAggregation\": \"detailPages\",\n\t\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\t\"target\": [\"master\", \"notFound\"]\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t\"routes\": [{\n\t\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\t\"name\": \"master\",\n\t\t\t\t\t\"target\": [\"object\", \"master\"]\n\t\t\t\t}, {\n\t\t\t\t\t\"pattern\": \"AttendanceIntervalSet/{objectId}\",\n\t\t\t\t\t\"name\": \"object\",\n\t\t\t\t\t\"target\": [\"master\", \"object\"]\n\t\t\t\t}],\n\n\t\t\t\t\"targets\": {\n\t\t\t\t\t\"master\": {\n\t\t\t\t\t\t\"viewName\": \"Master\",\n\t\t\t\t\t\t\"viewLevel\": 1,\n\t\t\t\t\t\t\"viewId\": \"master\",\n\t\t\t\t\t\t\"controlAggregation\": \"masterPages\"\n\t\t\t\t\t},\n\t\t\t\t\t\"object\": {\n\t\t\t\t\t\t\"viewName\": \"Detail\",\n\t\t\t\t\t\t\"viewId\": \"detail\",\n\t\t\t\t\t\t\"viewLevel\": 2\n\t\t\t\t\t},\n\t\t\t\t\t\"detailObjectNotFound\": {\n\t\t\t\t\t\t\"viewName\": \"DetailObjectNotFound\",\n\t\t\t\t\t\t\"viewId\": \"detailObjectNotFound\"\n\t\t\t\t\t},\n\t\t\t\t\t\"detailNoObjectsAvailable\": {\n\t\t\t\t\t\t\"viewName\": \"DetailNoObjectsAvailable\",\n\t\t\t\t\t\t\"viewId\": \"detailNoObjectsAvailable\"\n\t\t\t\t\t},\n\t\t\t\t\t\"notFound\": {\n\t\t\t\t\t\t\"viewName\": \"NotFound\",\n\t\t\t\t\t\t\"viewId\": \"notFound\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t * In this method, the resource and application models are set and the router is initialized.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tinit: function() {\n\t\t\tvar mConfig = this.getMetadata().getConfig();\n\n\t\t\t// creating and setting the necessary models\n\t\t\t// set the device model\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\t\t\t// set the FLP model\n\t\t\tthis.setModel(models.createFLPModel(), \"FLP\");\n\n\t\t\t// create and set the ODataModel\n\t\t\tvar oModel = models.createODataModel({\n\t\t\t\turlParametersForEveryRequest: [\n\t\t\t\t\t\"sap-server\",\n\t\t\t\t\t\"sap-client\",\n\t\t\t\t\t\"sap-language\"\n\t\t\t\t],\n\t\t\t\turl: this.getMetadata().getConfig().serviceUrl,\n\t\t\t\tconfig: {\n\t\t\t\t\tmetadataUrlParams: {\n\t\t\t\t\t\t\"sap-documentation\": \"heading\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.setModel(oModel);\n\t\t\tthis._createMetadataPromise(oModel);\n\n\t\t\t// set the i18n model\n\t\t\tthis.setModel(models.createResourceModel(mConfig.i18nBundle), \"i18n\");\n\n\t\t\tthis.oListSelector = new ListSelector();\n\t\t\tthis._oErrorHandler = new ErrorHandler(this);\n\t\t\t// call the base component's init function\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\t\t\t// create the views based on the url/hash\n\t\t\tthis.getRouter().initialize();\n\t\t},\n\n\t\t/**\n\t\t * The component is destroyed by UI5 automatically.\n\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tdestroy: function() {\n\t\t\tthis.oListSelector.destroy();\n\t\t\tthis._oErrorHandler.destroy();\n\t\t\tthis.getModel().destroy();\n\t\t\tthis.getModel(\"i18n\").destroy();\n\t\t\tthis.getModel(\"FLP\").destroy();\n\t\t\tthis.getModel(\"device\").destroy();\n\t\t\t// call the base component's destroy function\n\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\n\t\t},\n\n\t\t/**\n\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n\t\t * design mode class should be set, which influences the size appearance of some controls.\n\t\t * @public\n\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n\t\t */\n\t\tgetContentDensityClass: function() {\n\t\t\tif (this._sContentDensityClass === undefined) {\n\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\n\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\n\t\t\t\t\tthis._sContentDensityClass = \"\";\n\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\n\t\t\t\t} else {\n\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._sContentDensityClass;\n\t\t},\n\n\t\t/**\n\t\t * Creates a promise which is resolved when the metadata is loaded.\n\t\t * @param {sap.ui.core.Model} oModel the app model\n\t\t * @private\n\t\t */\n\t\t_createMetadataPromise: function(oModel) {\n\t\t\tthis.oWhenMetadataIsLoaded = new Promise(function(fnResolve, fnReject) {\n\t\t\t\toModel.attachEventOnce(\"metadataLoaded\", fnResolve);\n\t\t\t\toModel.attachEventOnce(\"metadataFailed\", fnReject);\n\t\t\t});\n\t\t}\n\n\t});\n\n});",
		"de/iprocon/controller/Detail.controller.js": "/*global location */\nsap.ui.define([\n\t\"de/iprocon/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"de/iprocon/model/formatter\"\n], function (BaseController, JSONModel, formatter) {\n\t\"use strict\";\n\treturn BaseController.extend(\"de.iprocon.controller.Detail\", {\n\t\tformatter: formatter,\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\nonInit: function () {\n\t\t\t// Model used to manipulate control states. The chosen values make sure,\n\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t// between the busy indication for loading the view's meta data\nvar oViewModel = new JSONModel({\n\t\t\t\tbusy: false,\n\t\t\t\tdelay: 0\n\t\t\t});\n\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n\t\t\tthis.setModel(oViewModel, \"detailView\");\n\t\t\tthis.getOwnerComponent().oWhenMetadataIsLoaded.then(this._onMetadataLoaded.bind(this));\n\t\t},\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Event handler when the share button has been clicked\n\t\t * @param {sap.ui.base.Event} oEvent the butten press event\n\t\t * @public\n\t\t */\nonSharePress: function () {\n\t\t\tvar oShareSheet = this.byId(\"shareSheet\");\n\t\t\toShareSheet.addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t\toShareSheet.openBy(this.byId(\"shareButton\"));\n\t\t},\n\t\t/**\n\t\t * Event handler when the share by E-Mail button has been clicked\n\t\t * @public\n\t\t */\nonShareEmailPress: function () {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\tsap.m.URLHelper.triggerEmail(null, oViewModel.getProperty(\"/shareSendEmailSubject\"), oViewModel.getProperty(\"/shareSendEmailMessage\"));\n\t\t},\n\t\t/**\n\t\t * Event handler when the share in JAM button has been clicked\n\t\t * @public\n\t\t */\nonShareInJamPress: function () {\n\t\t\tvar oViewModel = this.getModel(\"detailView\"), oShareDialog = sap.ui.getCore().createComponent({\n\t\t\t\t\tname: \"sap.collaboration.components.fiori.sharing.dialog\",\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tobject: {\n\t\t\t\t\t\t\tid: location.href,\n\t\t\t\t\t\t\tshare: oViewModel.getProperty(\"/shareOnJamTitle\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\toShareDialog.open();\n\t\t},\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Binds the view to the object path and expands the aggregated line items.\n\t\t * @function\n\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n\t\t * @private\n\t\t */\n_onObjectMatched: function (oEvent) {\n\t\t\tvar sObjectId = oEvent.getParameter(\"arguments\").objectId;\n\t\t\tthis.getOwnerComponent().oWhenMetadataIsLoaded.then(function () {\n\t\t\t\tvar sObjectPath = this.getModel().createKey(\"AttendanceIntervalSet\", { ID: sObjectId });\n\t\t\t\tthis._bindView(\"/\" + sObjectPath);\n\t\t\t}.bind(this));\n\t\t},\n\t\t/**\n\t\t * Binds the view to the object path. Makes sure that detail view displays\n\t\t * a busy indicator while data for the corresponding element binding is loaded.\n\t\t * @function\n\t\t * @param {string} sObjectPath path to the object to be bound to the view.\n\t\t * @private\n\t\t */\n_bindView: function (sObjectPath) {\n\t\t\t// Set busy indicator during view binding\nvar oViewModel = this.getModel(\"detailView\");\n\t\t\t// If the view was not bound yet its not busy, only if the binding requests data it is set to busy again\noViewModel.setProperty(\"/busy\", false);\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: sObjectPath,\n\t\t\t\tevents: {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function () {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function () {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t_onBindingChange: function () {\n\t\t\tvar oView = this.getView(), oElementBinding = oView.getElementBinding();\n\t\t\t// No data for the binding\nif (!oElementBinding.getBoundContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"detailObjectNotFound\");\n\t\t\t\t// if object could not be found, the selection in the master list\n\t\t\t\t// does not make sense anymore.\nthis.getOwnerComponent().oListSelector.clearMasterListSelection();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar sPath = oElementBinding.getPath(), oResourceBundle = this.getResourceBundle(), oObject = oView.getModel().getObject(sPath), sObjectId = oObject.ID, sObjectName = oObject.BeginDate, oViewModel = this.getModel(\"detailView\");\n\t\t\tthis.getOwnerComponent().oListSelector.selectAListItem(sPath);\n\t\t\toViewModel.setProperty(\"/saveAsTileTitle\", oResourceBundle.getText(\"shareSaveTileAppTitle\", [sObjectName]));\n\t\t\toViewModel.setProperty(\"/shareOnJamTitle\", sObjectName);\n\t\t\toViewModel.setProperty(\"/shareSendEmailSubject\", oResourceBundle.getText(\"shareSendEmailObjectSubject\", [sObjectId]));\n\t\t\toViewModel.setProperty(\"/shareSendEmailMessage\", oResourceBundle.getText(\"shareSendEmailObjectMessage\", [\n\t\t\t\tsObjectName,\n\t\t\t\tsObjectId,\n\t\t\t\tlocation.href\n\t\t\t]));\n\t\t},\n\t\t_onMetadataLoaded: function () {\n\t\t\t// Store original busy indicator delay for the detail view\nvar iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(), oViewModel = this.getModel(\"detailView\");\n\t\t\t// Make sure busy indicator is displayed immediately when\n\t\t\t// detail view is displayed for the first time\noViewModel.setProperty(\"/delay\", 0);\n\t\t\t// Binding the view will set it to not busy - so the view is always busy if it is not bound\noViewModel.setProperty(\"/busy\", true);\n\t\t\t// Restore original busy indicator delay for the detail view\noViewModel.setProperty(\"/delay\", iOriginalViewBusyDelay);\n\t\t},\n\t\t/**\n\t*@memberOf de.iprocon.controller.Detail\n\t*/\nonDeleteButtonPress: function (oEvent) {\n//This code was generated by the layout editor.\n\t\tvar oBindingContext = this.getView().getBindingContext();\n\t\tvar oObject = oBindingContext.getObject();\n\t\tvar sPath = \"/AttendanceIntervalSet('\" + oObject.ID + \"')\";\n\t\t\t\n\t\tvar oModel = this.getView().getModel();\n\t\toModel.remove(sPath, {\n\t\t\tsuccess: function() {\n\t\t\t\tsap.m.MessageToast.show(\"Eintrag gelöscht\");\n\t\t\t},\n\t\t\terror: function(oError) {\n\t\t\t\tvar sResponseText = JSON.parse(oError.responseText).error.message.value;\n\t\t\t\tsap.m.MessageToast.show(\"Eintrag konnte nicht angelegt werden (\" + sResponseText +\")\");\n\t\t\t}\n\t\t});\n\n\t},\n\t\t/**\n\t*@memberOf de.iprocon.controller.Detail\n\t*/\nonSaveButtonPress: function () {\n\t\tvar oBindingContext = this.getView().getBindingContext();\n\t\tvar oObject = oBindingContext.getObject();\n\t\tvar sPath = \"/AttendanceIntervalSet('\" + oObject.ID + \"')\";\n\t\t\t\n\t\tvar oModel = this.getView().getModel();\n\t\toModel.update(\n\t\t\tsPath, \n\t\t\toObject, {\n\t\t\tsuccess: function() {\n\t\t\t\tsap.m.MessageToast.show(\"Eintrag aktualisiert\");\n\t\t\t},\n\t\t\terror: function(oError) {\n\t\t\t\tvar sResponseText = JSON.parse(oError.responseText).error.message.value;\n\t\t\t\tsap.m.MessageToast.show(\"Eintrag konnte nicht aktualisiert werden (\" + sResponseText +\")\");\n\t\t\t}\n\t\t});\n\t\t}\n\t});\n});",
		"de/iprocon/controller/ErrorHandler.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/m/MessageBox\"\n], function(Object, MessageBox) {\n\t\"use strict\";\n\n\treturn Object.extend(\"de.iprocon.controller.ErrorHandler\", {\n\n\t\t/**\n\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n\t\t * @class\n\t\t * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n\t\t * @public\n\t\t * @alias de.iprocon.controller.ErrorHandler\n\t\t */\n\t\tconstructor: function(oComponent) {\n\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\n\t\t\tthis._oComponent = oComponent;\n\t\t\tthis._oModel = oComponent.getModel();\n\t\t\tthis._bMessageOpen = false;\n\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\n\t\t\tthis._sErrorTitle = this._oResourceBundle.getText(\"errorTitle\");\n\t\t\tthis._oModel.attachMetadataFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\tthis._showMetadataError(oParams.response);\n\t\t\t}, this);\n\n\t\t\tthis._oModel.attachRequestFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\n\t\t\t\t// We already cover this case with a notFound target so we skip it here.\n\t\t\t\t// A request that cannot be sent to the server is a technical error that we have to handle though\n\t\t\t\tif (oParams.response.statusCode !== \"404\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\n\t\t\t\t\t\"Cannot POST\") === 0)) {\n\t\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when the metadata call has failed.\n\t\t * The user can try to refresh the metadata.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showMetadataError: function(sDetails) {\n\t\t\t/*\n\t\t\tMessageBox.show(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"metadataErrorMessageBox\",\n\t\t\t\t\ticon: MessageBox.Icon.ERROR,\n\t\t\t\t\ttitle: this._sErrorTitle,\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.CLOSE]\n\t\t\t\t}\n\t\t\t);\n\t\t\t*/\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\n\t\t * Only the first error message will be display.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showServiceError: function(sDetails) {\n\t\t\t/*\n\t\t\tif (this._bMessageOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._bMessageOpen = true;\n\t\t\tMessageBox.show(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"serviceErrorMessageBox\",\n\t\t\t\t\ticon: MessageBox.Icon.ERROR,\n\t\t\t\t\ttitle: this._sErrorTitle,\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function() {\n\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t);\n\t\t\t*/\n\t\t}\n\t});\n\n});",
		"de/iprocon/controller/Master.controller.js": "/*global history */\nsap.ui.define([\n\t\"de/iprocon/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/GroupHeaderListItem\",\n\t\"sap/ui/Device\",\n\t\"de/iprocon/model/formatter\"\n], function (BaseController, JSONModel, Filter, FilterOperator, Sorter, GroupHeaderListItem, Device, formatter, grouper) {\n\t\"use strict\";\n\treturn BaseController.extend(\"de.iprocon.controller.Master\", {\n\t\tformatter: formatter,\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Called when the master list controller is instantiated. It sets up the event handling for the master/detail communication and other lifecycle tasks.\n\t\t * @public\n\t\t */\nonInit: function () {\n\t\t\t// Control state model\nvar oList = this.byId(\"list\"), oViewModel = new JSONModel({\n\t\t\t\t\tisFilterBarVisible: false,\n\t\t\t\t\tfilterBarLabel: \"\",\n\t\t\t\t\tdelay: 0,\n\t\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\n\t\t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDataText\"),\n\t\t\t\t\tsortBy: \"BeginDate\",\n\t\t\t\t\tgroupBy: \"None\"\n\t\t\t\t}),\n\t\t\t\t// Put down master list's original value for busy indicator delay,\n\t\t\t\t// so it can be restored later on. Busy handling on the master list is\n\t\t\t\t// taken care of by the master list itself.\niOriginalBusyDelay = oList.getBusyIndicatorDelay();\n\t\t\tthis._oList = oList;\n\t\t\t// keeps the filter and search state\nthis._oListFilterState = {\n\t\t\t\taFilter: [],\n\t\t\t\taSearch: []\n\t\t\t};\n\t\t\tthis.setModel(oViewModel, \"masterView\");\n\t\t\t// Make sure, busy indication is showing immediately so there is no\n\t\t\t// break after the busy indication for loading the view's meta data is\n\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\noList.attachEventOnce(\"updateFinished\", function () {\n\t\t\t\t// Restore original busy indicator delay for the list\noViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t});\n\t\t\tthis.getView().addEventDelegate({\n\t\t\t\tonBeforeFirstShow: function () {\n\t\t\t\t\tthis.getOwnerComponent().oListSelector.setBoundMasterList(oList);\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._onMasterMatched, this);\n\t\t\tthis.getRouter().attachBypassed(this.onBypassed, this);\n\t\t},\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * After list data is available, this handler method updates the\n\t\t * master list counter and hides the pull to refresh control, if\n\t\t * necessary.\n\t\t * @param {sap.ui.base.Event} oEvent the update finished event\n\t\t * @public\n\t\t */\nonUpdateFinished: function (oEvent) {\n\t\t\t// update the master list object counter after new data is loaded\nthis._updateListItemCount(oEvent.getParameter(\"total\"));\n\t\t\t// hide pull to refresh if necessary\nthis.byId(\"pullToRefresh\").hide();\n\t\t},\n\t\t/**\n\t\t * Event handler for the master search field. Applies current\n\t\t * filter value and triggers a new search. If the search field's\n\t\t * 'refresh' button has been pressed, no new search is triggered\n\t\t * and the list binding is refresh instead.\n\t\t * @param {sap.ui.base.Event} oEvent the search event\n\t\t * @public\n\t\t */\nonSearch: function (oEvent) {\n\t\t\tif (oEvent.getParameters().refreshButtonPressed) {\n\t\t\t\t// Search field's 'refresh' button has been pressed.\n\t\t\t\t// This is visible if you select any master list item.\n\t\t\t\t// In this case no new search is triggered, we only\n\t\t\t\t// refresh the list binding.\nthis.onRefresh();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar sQuery = oEvent.getParameter(\"query\");\n\t\t\tif (sQuery) {\n\t\t\t\tthis._oListFilterState.aSearch = [new Filter(\"BeginDate\", FilterOperator.Contains, sQuery)];\n\t\t\t} else {\n\t\t\t\tthis._oListFilterState.aSearch = [];\n\t\t\t}\n\t\t\tthis._applyFilterSearch();\n\t\t},\n\t\t/**\n\t\t * Event handler for refresh event. Keeps filter, sort\n\t\t * and group settings and refreshes the list binding.\n\t\t * @public\n\t\t */\nonRefresh: function () {\n\t\t\tthis._oList.getBinding(\"items\").refresh();\n\t\t},\n\t\t/**\n\t\t * Event handler for the sorter selection.\n\t\t * @param {sap.ui.base.Event} oEvent the select event\n\t\t * @public\n\t\t */\nonSort: function (oEvent) {\n\t\t\tvar sKey = oEvent.getSource().getSelectedItem().getKey(), oViewModel = this.getModel(\"masterView\"), sGroupKey = oViewModel.getProperty(\"/groupBy\");\n\t\t\tif (sGroupKey !== \"None\" && sKey !== sGroupKey) {\n\t\t\t\t// If the list is grouped by something different than the new sorting, remove the grouping\n\t\t\t\t// Grouping only works if the list is primary sorted by the grouping\noViewModel.setProperty(\"/groupBy\", \"None\");\n\t\t\t}\n\t\t\tthis._applyGroupSort([new Sorter(sKey, false)]);\n\t\t},\n\t\t/**\n\t\t * Event handler for the grouper selection.\n\t\t * @param {sap.ui.base.Event} oEvent the search field event\n\t\t * @public\n\t\t */\nonGroup: function (oEvent) {\n\t\t\tvar sKey = oEvent.getSource().getSelectedItem().getKey();\n\t\t\tvar aSorters = [];\n\t\t\tif (sKey === \"\") {\n\t\t\t\t// Grouping means sorting so we set the select to the same Entity used for grouping\nthis.getModel(\"masterView\").setProperty(\"/sortBy\", \"\");\n\t\t\t\taSorters.push(new Sorter(\"\", false, grouper[sKey].bind(oEvent.getSource())));\n\t\t\t}\n\t\t\tthis._applyGroupSort(aSorters);\n\t\t},\n\t\t/**\n\t\t * Event handler for the filter button to open the ViewSettingsDialog.\n\t\t * which is used to add or remove filters to the master list. This\n\t\t * handler method is also called when the filter bar is pressed,\n\t\t * which is added to the beginning of the master list when a filter is applied.\n\t\t * @public\n\t\t */\nonOpenViewSettings: function () {\n\t\t\tif (!this._oViewSettingsDialog) {\n\t\t\t\tthis._oViewSettingsDialog = sap.ui.xmlfragment(\"de.iprocon.view.ViewSettingsDialog\", this);\n\t\t\t\tthis.getView().addDependent(this._oViewSettingsDialog);\n\t\t\t\t// forward compact/cozy style into Dialog\nthis._oViewSettingsDialog.addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t\t}\n\t\t\tthis._oViewSettingsDialog.open();\n\t\t},\n\t\t/**\n\t\t * Event handler for the list selection event\n\t\t * @param {sap.ui.base.Event} oEvent the list selectionChange event\n\t\t * @public\n\t\t */\nonSelectionChange: function (oEvent) {\n\t\t\t// get the list item, either from the listItem parameter or from the event's source itself (will depend on the device-dependent mode).\nthis._showDetail(oEvent.getParameter(\"listItem\") || oEvent.getSource());\n\t\t},\n\t\t/**\n\t\t * Event handler for the bypassed event, which is fired when no routing pattern matched.\n\t\t * If there was an object selected in the master list, that selection is removed.\n\t\t * @public\n\t\t */\nonBypassed: function () {\n\t\t\tthis._oList.removeSelections(true);\n\t\t},\n\t\t/**\n\t\t * Used to create GroupHeaders with non-capitalized caption.\n\t\t * These headers are inserted into the master list to\n\t\t * group the master list's items.\n\t\t * @param {Object} oGroup group whose text is to be displayed\n\t\t * @public\n\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\n\t\t */\ncreateGroupHeader: function (oGroup) {\n\t\t\treturn new GroupHeaderListItem({\n\t\t\t\ttitle: oGroup.text,\n\t\t\t\tupperCase: false\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * Navigates back in the browser history, if the entry was created by this app.\n\t\t * If not, it navigates to the Fiori Launchpad home page\n\t\t * @override\n\t\t * @public\n\t\t */\nonNavBack: function () {\n\t\t\tvar oHistory = sap.ui.core.routing.History.getInstance(), sPreviousHash = oHistory.getPreviousHash(), oCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\nhistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Navigate back to FLP home\noCrossAppNavigator.toExternal({ target: { shellHash: \"#\" } });\n\t\t\t}\n\t\t},\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * If the master route was hit (empty hash) we have to set\n\t\t * the hash to to the first item in the list as soon as the\n\t\t * listLoading is done and the first item in the list is known\n\t\t * @private\n\t\t */\n_onMasterMatched: function () {\n\t\t\tthis.getOwnerComponent().oListSelector.oWhenListLoadingIsDone.then(function (mParams) {\n\t\t\t\tif (mParams.list.getMode() === \"None\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar sObjectId = mParams.firstListitem.getBindingContext().getProperty(\"ID\");\n\t\t\t\tthis.getRouter().navTo(\"object\", { objectId: sObjectId }, true);\n\t\t\t}.bind(this), function (mParams) {\n\t\t\t\tif (mParams.error) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\n\t\t\t}.bind(this));\n\t\t},\n\t\t/**\n\t\t * Shows the selected item on the detail page\n\t\t * On phones a additional history entry is created\n\t\t * @param {sap.m.ObjectListItem} oItem selected Item\n\t\t * @private\n\t\t */\n_showDetail: function (oItem) {\n\t\t\tvar bReplace = !Device.system.phone;\n\t\t\tthis.getRouter().navTo(\"object\", { objectId: oItem.getBindingContext().getProperty(\"ID\") }, bReplace);\n\t\t},\n\t\t/**\n\t\t * Sets the item count on the master list header\n\t\t * @param {integer} iTotalItems the total number of items in the list\n\t\t * @private\n\t\t */\n_updateListItemCount: function (iTotalItems) {\n\t\t\tvar sTitle;\n\t\t\t// only update the counter if the length is final\nif (this._oList.getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"masterTitleCount\", [iTotalItems]);\n\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/title\", sTitle);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Internal helper method to apply both filter and search state together on the list binding\n\t\t * @private\n\t\t */\n_applyFilterSearch: function () {\n\t\t\tvar aFilters = this._oListFilterState.aSearch.concat(this._oListFilterState.aFilter), oViewModel = this.getModel(\"masterView\");\n\t\t\tthis._oList.getBinding(\"items\").filter(aFilters, \"Application\");\n\t\t\t// changes the noDataText of the list in case there are no filter results\nif (aFilters.length !== 0) {\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFilterOrSearchText\"));\n\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\n\t\t\t\t// only reset the no data text to default when no new search was triggered\noViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataText\"));\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Internal helper method to apply both group and sort state together on the list binding\n\t\t * @private\n\t\t */\n_applyGroupSort: function (aSorters) {\n\t\t\tthis._oList.getBinding(\"items\").sort(aSorters);\n\t\t},\n\t\t/**\n\t\t * Internal helper method that sets the filter bar visibility property and the label's caption to be shown\n\t\t * @param {string} sFilterBarText the selected filter value\n\t\t * @private\n\t\t */\n_updateFilterBar: function (sFilterBarText) {\n\t\t\tvar oViewModel = this.getModel(\"masterView\");\n\t\t\toViewModel.setProperty(\"/isFilterBarVisible\", this._oListFilterState.aFilter.length > 0);\n\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getResourceBundle().getText(\"masterFilterBarText\", [sFilterBarText]));\n\t\t},\n\t\t/**\n\t*@memberOf de.iprocon.controller.Master\n\t*/\nonButtonInPress: function () {\n//This code was generated by the layout editor.\n\tvar oAttendanceInterval = {\n      PerNr: '16000005',\n\t  BeginDate : new Date(),\n\t  EndDate: new Date(),\n\t  CountryKey: 'DE',\n\t  AttendanceReason: '(N/A)'\n\t};\n\t\n\tvar oModel = this.getView().getModel();\n\toModel.create(\n\t\t\"/AttendanceIntervalSet\",\n\t\toAttendanceInterval,{\n\t\t\t\tsuccess: function(oEntry) {\n\t\t\t\t\tsap.m.MessageToast.show(\"Eintrag angelegt mit Nummer \" + oEntry.ID);\n\t\t\t\t},\n\t\t\t\terror: function(oError) {\n\t\t\t\t\tvar sResponseText = JSON.parse(oError.responseText).error.message.value;\n\t\t\t\t\tsap.m.MessageToast.show(\"Eintrag konnte nicht angelegt werden (\" + sResponseText +\")\");\n\t\t\t\t}\n\t\t\t}\n\t\t);\n},\n\t\t/**\n\t*@memberOf de.iprocon.controller.Master\n\t*/\nonButtonOutPress: function () {\n//This code was generated by the layout editor.\n\t\t}\n\t});\n});",
		"de/iprocon/controller/ListSelector.js": "sap.ui.define([\n\t\"sap/ui/base/Object\"\n], function(BaseObject) {\n\t\"use strict\";\n\n\treturn BaseObject.extend(\"de.iprocon.model.ListSelector\", {\n\n\t\t/**\n\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\n\t\t * function.\n\t\t * @class\n\t\t * @public\n\t\t * @alias de.iprocon.model.ListSelector\n\t\t */\n\n\t\tconstructor: function() {\n\t\t\tthis._oWhenListHasBeenSet = new Promise(function(fnResolveListHasBeenSet) {\n\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\n\t\t\t}.bind(this));\n\t\t\t// This promise needs to be created in the constructor, since it is allowed to\n\t\t\t// invoke selectItem functions before calling setBoundMasterList\n\t\t\tthis.oWhenListLoadingIsDone = new Promise(function(fnResolve, fnReject) {\n\t\t\t\t// Used to wait until the setBound masterList function is invoked\n\t\t\t\tthis._oWhenListHasBeenSet\n\t\t\t\t\t.then(function(oList) {\n\t\t\t\t\t\toList.getBinding(\"items\").attachEventOnce(\"dataReceived\",\n\t\t\t\t\t\t\tfunction(oData) {\n\t\t\t\t\t\t\t\tif (!oData.getParameter(\"data\")) {\n\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\terror: true\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar oFirstListItem = oList.getItems()[0];\n\t\t\t\t\t\t\t\tif (oFirstListItem) {\n\t\t\t\t\t\t\t\t\t// Have to make sure that first list Item is selected\n\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\n\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\n\t\t\t\t\t\t\t\t\tfnResolve({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\tfirstListitem: oFirstListItem\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// No items in the list\n\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\terror: false\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * A bound list should be passed in here. Should be done, before the list has received its initial data from the server.\n\t\t * May only be invoked once per ListSelector instance.\n\t\t * @param {sap.m.List} oList The list all the select functions will be invoked on.\n\t\t * @public\n\t\t */\n\t\tsetBoundMasterList: function(oList) {\n\t\t\tthis._oList = oList;\n\t\t\tthis._fnResolveListHasBeenSet(oList);\n\t\t},\n\n\t\t/**\n\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matching the binding context or the ListMode is none,\n\t\t * no selection/scrolling will happen\n\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\n\t\t * @public\n\t\t */\n\t\tselectAListItem: function(sBindingPath) {\n\n\t\t\tthis.oWhenListLoadingIsDone.then(\n\t\t\t\tfunction() {\n\t\t\t\t\tvar oList = this._oList,\n\t\t\t\t\t\toSelectedItem;\n\n\t\t\t\t\tif (oList.getMode() === \"None\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toSelectedItem = oList.getSelectedItem();\n\n\t\t\t\t\t// skip update if the current selection is already matching the object path\n\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toList.getItems().some(function(oItem) {\n\t\t\t\t\t\tif (oItem.getBindingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\toList.setSelectedItem(oItem);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}.bind(this),\n\t\t\t\tfunction() {\n\t\t\t\t\tjQuery.sap.log.warning(\"Could not select the list item with the path\" + sBindingPath +\n\t\t\t\t\t\t\" because the list encountered an error or had no items\");\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* Convenience Functions for List Selection Change Event       */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By using\n\t\t * a promise, the listener is added, even if the list is not available when 'attachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t * @param {function} oListener the listener object\n\t\t * @return {de.iprocon.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tattachListSelectionChange: function(fnFunction, oListener) {\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Detaches a listener and listener function from the ListSelector's bound master list. By using\n\t\t * a promise, the listener is removed, even if the list is not available when 'detachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t * @param {function} oListener the listener object\n\t\t * @return {de.iprocon.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tdetachListSelectionChange: function(fnFunction, oListener) {\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Removes all selections from master list.\n\t\t * Does not trigger 'selectionChange' event on master list, though.\n\t\t * @public\n\t\t */\n\t\tclearMasterListSelection: function() {\n\t\t\t//use promise to make sure that 'this._oList' is available\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.removeSelections(true);\n\t\t\t}.bind(this));\n\t\t}\n\n\t});\n\n});",
		"de/iprocon/view/App.view.xml": "<mvc:View busy=\"{appView>/busy}\" busyIndicatorDelay=\"{appView>/delay}\" controllerName=\"de.iprocon.controller.App\" displayBlock=\"true\"\n\txmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<SplitApp id=\"idAppControl\"/>\n</mvc:View>",
		"de/iprocon/controller/App.controller.js": "sap.ui.define([\n\t\"de/iprocon/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\"\n], function(BaseController, JSONModel) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"de.iprocon.controller.App\", {\n\n\t\tonInit: function() {\n\t\t\tvar oViewModel,\n\t\t\t\tfnSetAppNotBusy,\n\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\n\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\n\n\t\t\toViewModel = new JSONModel({\n\t\t\t\tbusy: true,\n\t\t\t\tdelay: 0\n\t\t\t});\n\t\t\tthis.setModel(oViewModel, \"appView\");\n\n\t\t\tfnSetAppNotBusy = function() {\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t};\n\n\t\t\tthis.getOwnerComponent().oWhenMetadataIsLoaded.\n\t\t\tthen(fnSetAppNotBusy, fnSetAppNotBusy);\n\n\t\t\t// Makes sure that master view is hidden in split app\n\t\t\t// after a new list entry has been selected.\n\t\t\toListSelector.attachListSelectionChange(function() {\n\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\n\t\t\t}, this);\n\n\t\t\t// apply content density mode to root view\n\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t}\n\n\t});\n\n});",
		"de/iprocon/controller/BaseController.js": "/*global history */\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\"\n], function(Controller, History) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"de.iprocon.controller.BaseController\", {\n\t\t/**\n\t\t * Convenience method for accessing the router in every controller of the application.\n\t\t * @public\n\t\t * @returns {sap.ui.core.routing.Router} the router for this component\n\t\t */\n\t\tgetRouter: function() {\n\t\t\treturn this.getOwnerComponent().getRouter();\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for getting the view model by name in every controller of the application.\n\t\t * @public\n\t\t * @param {string} sName the model name\n\t\t * @returns {sap.ui.model.Model} the model instance\n\t\t */\n\t\tgetModel: function(sName) {\n\t\t\treturn this.getView().getModel(sName);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for setting the view model in every controller of the application.\n\t\t * @public\n\t\t * @param {sap.ui.model.Model} oModel the model instance\n\t\t * @param {string} sName the model name\n\t\t * @returns {sap.ui.mvc.View} the view instance\n\t\t */\n\t\tsetModel: function(oModel, sName) {\n\t\t\treturn this.getView().setModel(oModel, sName);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for getting the resource bundle.\n\t\t * @public\n\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\n\t\t */\n\t\tgetResourceBundle: function() {\n\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t},\n\n\t\t/**\n\t\t * Event handler  for navigating back.\n\t\t * It checks if there is a history entry. If yes, history.go(-1) will happen.\n\t\t * If not, it will replace the current entry of the browser history with the master route.\n\t\t * @public\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash();\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Otherwise we go backwards with a forward history\n\t\t\t\tvar bReplace = true;\n\t\t\t\tthis.getRouter().navTo(\"master\", {}, bReplace);\n\t\t\t}\n\t\t}\n\n\t});\n\n});",
		"de/iprocon/localService/mockserver.js": "sap.ui.define([\n\t\"sap/ui/core/util/MockServer\"\n], function(MockServer) {\n\t\"use strict\";\n\n\tvar oMockServer,\n\t\t_sAppModulePath = \"de/iprocon/\",\n\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\",\n\t\t_sMetadataUrl = _sAppModulePath + \"localService/metadata\",\n\t\t_sMainDataSourceUrl = \"/sap/opu/odata/sap/ZHR_ATTENDANCE_INTERVAL_SRV/\";\n\n\treturn {\n\t\t/**\n\t\t * Initializes the mock server.\n\t\t * You can configure the delay with the URL parameter \"serverDelay\".\n\t\t * The local mock data in this folder is returned instead of the real data for testing.\n\t\t * @public\n\t\t */\n\n\t\tinit: function() {\n\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\n\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\n\t\t\t\tsEntity = \"AttendanceIntervalSet\",\n\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\n\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\n\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sMetadataUrl, \".xml\");\n\n\t\t\toMockServer = new MockServer({\n\t\t\t\trootUri: _sMainDataSourceUrl\n\t\t\t});\n\n\t\t\t// configure mock server with a delay of 1s\n\t\t\tMockServer.config({\n\t\t\t\tautoRespond: true,\n\t\t\t\tautoRespondAfter: (oUriParameters.get(\"serverDelay\") || 1000)\n\t\t\t});\n\n\t\t\toMockServer.simulate(sMetadataUrl, {\n\t\t\t\tsMockdataBaseUrl: sJsonFilesUrl,\n\t\t\t\tbGenerateMissingMockData: true\n\t\t\t});\n\n\t\t\tvar aRequests = oMockServer.getRequests(),\n\t\t\t\tfnResponse = function(iErrCode, sMessage, aRequest) {\n\t\t\t\t\taRequest.response = function(oXhr) {\n\t\t\t\t\t\toXhr.respond(iErrCode, {\n\t\t\t\t\t\t\t\"Content-Type\": \"text/plain;charset=utf-8\"\n\t\t\t\t\t\t}, sMessage);\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t// handling the metadata error test\n\t\t\tif (oUriParameters.get(\"metadataError\")) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\n\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Handling request errors\n\t\t\tif (sErrorParam) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\n\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\toMockServer.start();\n\n\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\n\t\t},\n\n\t\t/**\n\t\t * @public returns the mockserver of the app, should be used in integration tests\n\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\n\t\t */\n\t\tgetMockServer: function() {\n\t\t\treturn oMockServer;\n\t\t}\n\t};\n\n});",
		"de/iprocon/model/models.js": "sap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\",\n\t\"sap/ui/model/odata/v2/ODataModel\",\n\t\"sap/ui/model/resource/ResourceModel\"\n], function(JSONModel, Device, ODataModel, ResourceModel) {\n\t\"use strict\";\n\n\tfunction extendMetadataUrlParameters(aUrlParametersToAdd, oMetadataUrlParams, sServiceUrl) {\n\t\tvar oExtensionObject = {},\n\t\t\toServiceUri = new URI(sServiceUrl);\n\n\t\taUrlParametersToAdd.forEach(function(sUrlParam) {\n\t\t\tvar sLanguage,\n\t\t\t\toUrlParameters,\n\t\t\t\tsParameterValue;\n\n\t\t\t// for sap-language we check if the launchpad can provide it.\n\t\t\tif (sUrlParam === \"sap-language\") {\n\t\t\t\tsLanguage = sap.ushell.Container.getUser().getLanguage();\n\n\t\t\t\tif (sLanguage) {\n\t\t\t\t\toMetadataUrlParams[\"sap-language\"] = sLanguage;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Continue searching in the url\n\t\t\t}\n\n\t\t\toUrlParameters = jQuery.sap.getUriParameters();\n\t\t\tsParameterValue = oUrlParameters.get(sUrlParam);\n\t\t\tif (sParameterValue) {\n\t\t\t\toMetadataUrlParams[sUrlParam] = sParameterValue;\n\t\t\t\toServiceUri.addSearch(sUrlParam, sParameterValue);\n\t\t\t}\n\t\t});\n\n\t\tjQuery.extend(oMetadataUrlParams, oExtensionObject);\n\t\treturn oServiceUri.toString();\n\t}\n\n\treturn {\n\t\t/**\n\t\t *\n\t\t * @param {object} oOptions a map which contains the following parameter properties\n\t\t * @param {string} oOptions.url see {@link sap.ui.model.odata.v2.ODataModel#constructor.sServiceUrl}.\n\t\t * @param {object} [oOptions.urlParametersForEveryRequest] If the parameter is present in the URL or in case of language the UShell can provide it,\n\t\t * it is added to the odata models metadataUrlParams {@link sap.ui.model.odata.v2.ODataModel#constructor.mParameters.metadataUrlParams}, and to the service url.\n\t\t * If you provided a value in the config.metadataUrlParams this value will be overwritten by the value in the url.\n\t\t *\n\t\t * Example: the app is started with the url query, and the user has an us language set in the launchpad:\n\t\t *\n\t\t * ?sap-server=serverValue&sap-host=hostValue\n\t\t *\n\t\t * The createODataModel looks like this.\n\t\t *\n\t\t * models.createODataModel({\n\t\t *     urlParametersToPassOn: [\n\t\t *         \"sap-server\",\n\t\t *         \"sap-language\",\n\t\t *         \"anotherValue\"\n\t\t *     ],\n\t\t *     url : \"my/Url\"\n\t\t * });\n\t\t *\n\t\t * then the config will have the following metadataUrlParams:\n\t\t *\n\t\t * metadataUrlParams: {\n\t\t *     // retrieved from the url\n\t\t *     \"sap-server\" : \"serverValue\"\n\t\t *     // language is added from the launchpad\n\t\t *     \"sap-language\" : \"us\"\n\t\t *     // anotherValue is not present in the url and will not be added\n\t\t * }\n\t\t *\n\t\t * @param {object} [oOptions.config] see {@link sap.ui.model.odata.v2.ODataModel#constructor.mParameters} it is the exact same object, the metadataUrlParams are enriched by the oOptions.urlParametersToPassOn\n\t\t * @returns {sap.ui.model.odata.v2.ODataModel}\n\t\t */\n\t\tcreateODataModel: function(oOptions) {\n\t\t\tvar aUrlParametersForEveryRequest,\n\t\t\t\toConfig,\n\t\t\t\tsUrl;\n\n\t\t\toOptions = oOptions || {};\n\n\t\t\tif (!oOptions.url) {\n\t\t\t\tjQuery.sap.log.error(\"Please provide a url when you want to create an ODataModel\", \"de/iprocon.model.models.createODataModel\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// create a copied instance since we modify the config\n\t\t\toConfig = jQuery.extend(true, {}, oOptions.config);\n\n\t\t\taUrlParametersForEveryRequest = oOptions.urlParametersForEveryRequest || [];\n\t\t\toConfig.metadataUrlParams = oConfig.metadataUrlParams || {};\n\n\t\t\tsUrl = extendMetadataUrlParameters(aUrlParametersForEveryRequest, oConfig.metadataUrlParams, oOptions.url);\n\n\t\t\treturn this._createODataModel(sUrl, oConfig);\n\t\t},\n\n\t\t_createODataModel: function(sUrl, oConfig) {\n\t\t\tvar oModel = new ODataModel(sUrl, oConfig);\n\t\t\toModel.setDefaultBindingMode(\"TwoWay\");\n\t\t\treturn oModel;\n\t\t},\n\n\t\tcreateDeviceModel: function() {\n\t\t\tvar oModel = new JSONModel(Device);\n\t\t\toModel.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);\n\t\t\treturn oModel;\n\t\t},\n\n\t\tcreateFLPModel: function() {\n\t\t\tvar bIsShareInJamActive = sap.ushell.Container.getUser().isJamActive(),\n\t\t\t\toModel = new JSONModel({\n\t\t\t\t\tisShareInJamActive: bIsShareInJamActive\n\t\t\t\t});\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t},\n\n\t\tcreateResourceModel: function(sBundleName) {\n\t\t\tvar oResourceModel = new ResourceModel({\n\t\t\t\t\"bundleName\": sBundleName\n\t\t\t});\n\t\t\treturn oResourceModel;\n\t\t}\n\t};\n\n});",
		"de/iprocon/view/DetailObjectNotFound.view.xml": "<mvc:View controllerName=\"de.iprocon.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage description=\"\" icon=\"{sap-icon://product}\" id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\"\n\t\ttext=\"{i18n>noObjectFoundText}\" title=\"{i18n>detailTitle}\"></MessagePage>\n</mvc:View>",
		"de/iprocon/view/NotFound.view.xml": "<mvc:View controllerName=\"de.iprocon.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage description=\"\" icon=\"{sap-icon://document}\" id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\"\n\t\ttext=\"{i18n>notFoundText}\" title=\"{i18n>notFoundTitle}\"></MessagePage>\n</mvc:View>",
		"de/iprocon/view/ViewSettingsDialog.fragment.xml": "<core:FragmentDefinition xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\">\n\t<ViewSettingsDialog confirm=\"onConfirmViewSettingsDialog\" id=\"viewSettingsDialog\" resetFilters=\"onViewSettingsDialogResetFilters\">\n\t\t<filterItems>\n\t\t\t<ViewSettingsFilterItem id=\"filterItems\" key=\"Price\" multiSelect=\"false\" text=\"{i18n>masterFilterName}\">\n\t\t\t\t<items>\n\t\t\t\t\t<ViewSettingsItem id=\"viewFilter1\" key=\"Filter1\" text=\"{i18n>masterFilter1}\"/>\n\t\t\t\t\t<ViewSettingsItem id=\"viewFilter2\" key=\"Filter2\" text=\"{i18n>masterFilter2}\"/>\n\t\t\t\t</items>\n\t\t\t</ViewSettingsFilterItem>\n\t\t</filterItems>\n\t</ViewSettingsDialog>\n</core:FragmentDefinition>",
		"de/iprocon/view/Master.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"de.iprocon.controller.Master\">\n\t<Page id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"true\" title=\"{masterView&gt;/title}\">\n\t\t<subHeader>\n\t\t\t<Bar id=\"headerBar\">\n\t\t\t\t<contentMiddle>\n\t\t\t\t\t<SearchField id=\"searchField\" search=\"onSearch\" showRefreshButton=\"{= !${device&gt;/support/touch} }\" tooltip=\"{i18n&gt;masterSearchTooltip}\" width=\"100%\"/>\n\t\t\t\t</contentMiddle>\n\t\t\t</Bar>\n\t\t</subHeader>\n\t\t<content>\n\t\t\t<PullToRefresh id=\"pullToRefresh\" refresh=\"onRefresh\" visible=\"{device&gt;/support/touch}\"/>\n\t\t\t<!-- For client side filtering add this to the items attribute:  parameters: {operationMode: 'Client'}}\" -->\n\t\t\t<List busyIndicatorDelay=\"{masterView>/delay}\" growing=\"true\" growingScrollToLoad=\"true\" growingThreshold=\"10\" id=\"list\" items=\"{ path: '/AttendanceIntervalSet', sorter: { path: 'ID', descending: true }, groupHeaderFactory: '.createGroupHeader' }\" mode=\"{= ${device&gt;/system/phone} ? 'None' : 'SingleSelectMaster'}\" noDataText=\"{masterView&gt;/noDataText}\" selectionChange=\"onSelectionChange\" updateFinished=\"onUpdateFinished\">\n\t\t\t\t<infoToolbar>\n\t\t\t\t\t<Toolbar active=\"true\" id=\"filterBar\" press=\"onOpenViewSettings\" visible=\"{masterView&gt;/isFilterBarVisible}\">\n\t\t\t\t\t\t<Title id=\"filterBarLabel\" text=\"{masterView&gt;/filterBarLabel}\"/>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</infoToolbar>\n\t\t\t\t<items>\n\t\t\t\t\t<ObjectListItem press=\"onSelectionChange\" title=\"{path: 'BeginDate', type: 'sap.ui.model.type.Date', pattern: 'dd.MM.yyyy'}-{path: 'EndDate', type: 'sap.ui.model.type.Date', pattern: 'dd.MM.yyyy'}\" type=\"{= ${device&gt;/system/phone} ? 'Active' : 'Inactive'}\"/>\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t</content>\n\t\t<footer>\n\t\t\t<OverflowToolbar id=\"footerbar\">\n\t\t\t    <content>\n\t\t\t        <Button text=\"In\" width=\"100px\" id=\"buttonIn\" icon=\"sap-icon://navigation-right-arrow\" press=\"onButtonInPress\"/>\n\t\t\t        <Button text=\"Out\" width=\"100px\" id=\"buttonOut\" iconFirst=\"false\" icon=\"sap-icon://navigation-right-arrow\" press=\"onButtonOutPress\"/>\n\t\t\t    </content>\n\t\t\t</OverflowToolbar>\n\t\t</footer>\n\t</Page>\n</mvc:View>",
		"de/iprocon/view/DetailNoObjectsAvailable.view.xml": "<mvc:View controllerName=\"de.iprocon.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage description=\"\" icon=\"{sap-icon://product}\" id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\"\n\t\ttext=\"{i18n>noObjectsAvailableText}\" title=\"{i18n>notAvailableViewTitle}\"></MessagePage>\n</mvc:View>"
	}
});